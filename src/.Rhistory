a = 1
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
a = 1
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
a = 1
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
a = 1
mtext("Ozone and Weather in New York City", outer = TRUE)
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
head(airquality)
xyplot(Ozone ~ Wind, data = airquality)
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone~Wind,data=airquality)
print(p)
names(p)
mynames = names(p)
myames[myfull]
mynames[myfull]
p[["formula"]]
p[["x.limits"]]
table(f)
dim(f)
names(f)
xyplot(y ~ x | f, layout = c(2, 1))
v1
v2
as.factor(airquality$Month)
airquality$Month
xyplot(y ~ x | f, layout = c(2, 1))
y
x
xyplot(Ozone ~ Wind, data = airquality, col = "red", pch = 8, main = "Big Apple Data")
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
xyplot(Ozone ~ Wind | as.factor(Month), data = airquality, layout = c(5,1))
xyplot(y ~ x | f, layout = c(2, 1))
myedit("plot1.R")
pathtofile("plot1R", local = TRUE)
pathtofile("plot1R", localset = TRUE)
pathtofile("plot1R", localset = TRUE)
pathtofile("plot1R")
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R"),local=TRUE)
str(diamonds)
?str
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
source(pathtofile("myLabels.R"),local = TRUE)
xyplot(price ~ carat | color*cut, data = diamons, strip = FALSE, pch = 20, xlab = myxlab, ylab = mylab main = mymain)
xyplot(price ~ carat | color*cut, data = diamons, strip = FALSE, pch = 20, xlab = myxlab, ylab = mylab, main = mymain)
xyplot(price ~ carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = mylab, main = mymain)
xyplot(price ~ carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
xyplot(price ~ carat | color*cut, data = diamonds, pch = 20, xlab = myxlab, ylab = myylab, main = mymain)
colors()
sample(colors(),10)
colorRamp(c("red","blue"))
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1,len=6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(seq(0,1,len=6))
p1(6)
0xCC0033
0xcC
p2(c("red","yellow"))
a = 1
p2 <- colorRampPalette(c("red","yellow"))
p2(2)
ply()
play()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?splom
?print.trellis
?splom
?trellis.par.set
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
library(ggplot2)
qplot(votes, rating, data = movies)
data(movies)
data("movies")
dataset("movies")
data(cars)
data(movies)
library(ggplot2)
data(movies)
library(ggplot)
nxt()
p2(10)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3(c("blue","green"),alpha=0.5)
p3 <- colorRampPalette(c("blue","green"),alpha=0.5)
p3(5)
a = 1
plot(x,y,pch=19,col=rgb(0,.5,.5))
plot(x,y,pch=19,col=rgb(0,.5,.5), alpha=0.3)
plot(x,y,pch=19,col=rgb(0,.5,.5, alpha=0.3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
source(showMe)
a=1
pal <- colorRampPalette(cols)
showMe(pal(3))
showMe(pal(20))
image(volcano, col=pal(20))
image(volcano, col=p1รง(20))
image(volcano, col=p1(20))
0
?image
swirl()
library(swirl)
swirl()
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point","smooth"))
qplot(y = hwy, data = mpg, color= drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = "manufacturer")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
a = 1
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = . ~ drv, binwidth = 2)
qplot(hwy, data = mpg, facets = . ~ drv, binwidth = 2)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
a = 1
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(y = hwy, data = mpg, color= drv)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv,method="loess")
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
quit
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
library(swirl)
swirl()
a = 1
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
library(swirl)
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
library(swirl)
swirl()
library(swirl)
swirl()
install_from_swirl("Exploratory Data Analysis")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
a=1
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
qplot(displ, hwy, data = mpg, geom=c("point", "smooth"),facets=.~drv)
a = 1
g <- ggplot(mpg, aes(displ,hwy) )
g
summary(g)
g+geom_point()
(g + geom_point()) + geom_smooth()
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth()
g+geom_point()+geom_smooth(method = "lm")
g+geom_point()+geom_smooth(method = "lm")+acet_grid(.~drv)
g+geom_point()+geom_smooth(method = "lm")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method = "loess")+facet_grid(.~drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid(.~drv)+ ggtitle("Swirl Rules!")
a = 1
g+geom_point(color="pink",size=4,alpha=1/2)
a = 1
g + geom_point(aes(color = drv), size = 4, alpha = 1/2)
g + geom_point(aes(color = drv), alpha = 1/2)
g + geom_point(aes(color = drv)) + labs(title="Swirl Rules!") + labs(x="Displacement", y="Hwy Mileage")
a = 1
g + geom_point(aes(color = drv),size=2,alpha=1/2) + geom_smooth(size=4,linetype=3,method="lm",se=FALSE)
a = 1
g + geom_point(aes(color = drv)) + theme_bw(base_family="Times")
g + geom_point(aes(color = drv)) + theme_bw(base_family="Arial")
plot(myx, myy, type = "l", ylim = c(-3,3))
a = 1
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy)) + geom_line()
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line()
g + geom_line + ylim(-3,3)
a=1
g + geom_line() + ylim(-3,3)
g + geom_line() + coord_cartesian(-3,3)
g + geom_line() + coord_cartesian(ylime=c(-3,3))
g + geom_line() + coord_cartesian(ylim=c(-3,3))
a=1
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g
g + geom_line() + ylim(-3,3)
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line() + ylim(-3,3)
myy
myx
str(g)
g + geom_line() + ylim(-3,3)
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line() + ylim(-3,3)
g + geom_point()
g <- ggplot(mpg,aes(x=displ,y=hwy,color=factor(year)))
g + geom_point()
g + geom_point()  + facet_grid(drv~cyl,margins=TRUE)
a=1
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")
a=1
facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
g + geom_point() + facet_grid(drv~cyl,margins=TRUE)+geom_smooth(method="lm",size=2,se=FALSE,color="black")+labs(x="Displacement",y="Highway Mileage",title="Swirl Rules!")
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(diistxy)
a = 1
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc))
plot(hc)
plot(as.dendrogram(hc))
abline(h=1.5,col="blue")
a=1
abline(h=.4,col="red")
5
9
12
abline(h=.05,col="green")
dist(dFsm)
hc
heatmap(dataMatrix, col=cm.colors(25))
heatmap(mt)
mt
plot(denmt)
distmt
cmat
a = 1
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
a=1
mdist(x,y,cx,cy)
a=1
apply(distTmp,2,which.min)
a=1
points(x,y,pch=19,cex=2,col=cols1[newClust])
a=1
tapply(x,newClust,mean)
a=1
tapply(y,newClust,mean)
a=1
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
a=1
mdist(x,y,newCx,newCy)
a=1
apply(distTmp2,2,which.min)
a=1
points(x,y,pch=19,cex=2,col=cols1[newClust2])
a=1
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
a=1
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame, centers = 3)
kmObj$iter
a=1
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
a=1
points(kmObj$centers,col=c("black","red","green"),pch=3,cex=3,lwd=3)
a=1
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
output: pdf_document
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(i) inv <<- i
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinv()
if(!is.null(i)) {
message("Getting cached data ...")
return(i)
}
data <- x$get()
i <- solve(data, ...)
x$setinv(i)
i
}
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
cacheSolve(my_matrix)
my_matrix$getInverse()
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getInverse()
my_matrix <- makeCacheMatrix(matrix(1:4, 2, 2))
my_matrix$get()
my_matrix$getinv()
cacheSolve(my_matrix)
my_matrix$getinv()
my_matrix$getInverse()
> cacheSolve(my_matrix)
cacheSolve(my_matrix)
setwd("~/research/rep/R_Programming_Hospital_Compare/src")
is.integer("a")
is.integer("1")
is.integer(1)
is.integer(33)
is.integer(33.0)
x=2
is.integer(x)
?is.integer
x == round(x)
x="a"
x == round(x)
?is.numeric
is.numeric(x)
x="2"
is.numeric(x)
x=2
is.numeric(x)
x == 2
x = "a"
x == "a"
source('~/research/rep/R_Programming_Hospital_Compare/src/rankhospital.R')
rankhospital("MD", "heart attack", "worst")
na
NA
x = c(1,2,3)
x[nrow(x),]
nrow(x)
n = c(2, 3, 5)
n = c(2, 3, 5)
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
nrow(df)
df
df[3,]
df[norw(df),]
df[nrow(df),]
s = c("aa", "bb", "cc")
df = data.frame(n, s, b)
df
source('~/research/rep/R_Programming_Hospital_Compare/src/rankhospital.R')
source('~/research/rep/R_Programming_Hospital_Compare/src/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('~/research/rep/R_Programming_Hospital_Compare/src/rankhospital.R')
rankhospital("MN", "heart attack", 5000)
source('~/research/rep/R_Programming_Hospital_Compare/src/rankhospital.R')
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
outcomeType = "heart attack"
outcomeCol <- outcomeResolver[outcomeType]
outcomeCol
rates <- outcome[!is.na(outcome[outcomeCol]), c(State, outcomeCol, "Hospital.Name")]
rates <- outcome[!is.na(outcome[outcomeCol]), c("State", outcomeCol, "Hospital.Name")]
head(rates)
s = split(rates, "State")
head(s)
df
split(df, s)
split(df, "s")
split(df, df$s)
ss = split(df, df$s)
ss
ss$aa
?lapply
numVal = 1
lapply(ss, function(e) e[1,n])
lapply(ss, function(e) e[1,e$n])
ss
lapply(ss, function(e) e[1,e$n])
ss$aa
e = ss$aa
class(e)
e[1,e$n]
e
st = c("A","A","A","B","B","B","C","C","D")
length(st)
hp = c("z1","x2","y3","w3","v4","u5","r6","s7","t8","p9")
n = c(11,12,13,14,15,16,17,18,19)
df = data.frame(st, hp, n)
length(st)
length(hp)
hp = c("z1","x2","y3","w4","v5","u6","r7","s8","t9")
df = data.frame(st, hp, n)
df
split(df, df$st)
ss <- split(df, df$st)
ss
lapply(ss, function(e) e[1,e$n])
ss
?unsplit
lapply(ss, function(e) e[1,e$n])
lapply(ss, function(elem) elem[1,elem$n])
ratesByState <- split(orderedRates, orderedRates$State)
orderedRates <- rate[order(rates$State, rates[outcomeCol], rates$Hospital.Name, decreasing = decreasing), ]
orderedRates <- rates[order(rates$State, rates[outcomeCol], rates$Hospital.Name, decreasing = decreasing), ]
decreasing = FALSE
orderedRates <- rates[order(rates$State, rates[outcomeCol], rates$Hospital.Name, decreasing = decreasing), ]
ratesByState <- split(orderedRates, orderedRates$State)
?by
ss
by(ss, FUN = function(elem) elem[1,elem$n)
by(ss, FUN = function(elem) elem[1,elem$n])
df
by(df, ss, FUN = function(elem) elem[1,elem$n])
by(df, df$st, FUN = function(elem) elem[1,elem$n])
for(f in ss) { print(i) }
for(f in ss) { print(f) }
for(f in ss) { print(f[1,f$n]) }
for(f in ss) { print(f[1,n]) }
for(f in ss) { print(f[1,]$n) }
for(f in ss) { print(f[1,"n"]) }
lapply(ss, function(elem) elem[1,"n"])
s
ss
lapply(ss, function(elem) elem[1,c("hp", "n")])
source('~/research/rep/R_Programming_Hospital_Compare/src/rankall.R')
head(rankall("heart attack", 20), 10)
vapply(ratesByState, function(elem) elem[numVal, "Hospital.Name"])
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
source('~/research/rep/R_Programming_Hospital_Compare/src/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
source('~/research/rep/R_Programming_Hospital_Compare/src/rankall.R')
source('~/research/rep/R_Programming_Hospital_Compare/src/rankall.R')
tail(rankall("pneumonia", "worst"), 3)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure", "best"), 10)
source('~/research/rep/R_Programming_Hospital_Compare/src/rankall.R')
tail(rankall("heart failure", "best"), 10)
tail(rankall("heart failure"), 10)
source('~/research/rep/R_Programming_Hospital_Compare/src/rankall.R')
source('~/research/rep/R_Programming_Hospital_Compare/src/rankhospital.R')
source('~/research/rep/R_Programming_Hospital_Compare/src/best.R')
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source('~/research/rep/R_Programming_Hospital_Compare/src/rankhospital.R')
rankhospital("TX", "heart failure", 4)
source('~/research/rep/R_Programming_Hospital_Compare/src/rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
head(r, 2)
r$HI
r <- rankall("pneumonia", "worst")
r$NJ
r <- rankall("heart failure", 10)
r$NV
